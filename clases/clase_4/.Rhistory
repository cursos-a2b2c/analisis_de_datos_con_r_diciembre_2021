#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
dbinom(0:48, 48, prob = 0.5)
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
sum(dbinom(0:48, 48, prob = 0.5))
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
hist(dbinom(0:48, 48, prob = 0.5))
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
hist(pbinom(0:48, 48, prob = 0.5))
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
plot(0:48, pbinom(0:48, 48, prob = 0.5))
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
plot(0:48, dbinom(0:48, 48, prob = 0.5))
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
plot(0:48, dbinom(0:48, 48, prob = 0.5),type='h')
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
cuantos_masculinos <- 0:48
densidad_de_masculinos <- dbinom(cuantos_masculinos, 48, prob = 0.5)
plot(cuantos_masculinos, densidad_de_masculinos,type='h')
plot(cuantos_masculinos, probabilidad_de_masculinos,type='h')
#Las gallinas femeninas son mas valiosas para las granjas que las masculinas porque
#pueden poner huevos. Un laboratorio quiere probar tres drogas que supuestamente aumentan la probabilidad
#de que una gallina nazca femenina en lugar de masculina.
#Aplica cada tipo de droga en tres grupos de 48 gallinas (una droga por grupo) y obtiene los siguientes resultados:
#Droga 1: 25 F 23 M
#Droga 2: 47 F 1 M
#Droga 3: 31 F 17 M
#¿Qué dirían respecto a cada droga?
#Si suponemos que sin la droga, la probabilidad de que sea M o F es 50%, ¿cuál es la probabilidad de obtener
#cada uno de esos resultados por azar?
cuantos_masculinos         <- 0:48
probabilidad_de_masculinos <- dbinom(cuantos_masculinos, 48, prob = 0.5)
plot(cuantos_masculinos, probabilidad_de_masculinos,type='h')
#Calculemos la probabilidad de obtener 17 o menos "a mano".
sum(dbinom(0:17, 48, prob = 0.5))
sum(dbinom(31:48, 48, prob = 0.5))
#Calculemos la probabilidad de haber obtenido cada una de esas cosas por azar,
binom.test(0:17, 48, p = 0.5, "less")
#Calculemos la probabilidad de haber obtenido cada una de esas cosas por azar,
binom.test(17, 48, p = 0.5, "less")
#Otra hipotesis alternativa podria ser que la droga cambia la probabilidad de 0.5 de obtener F o M, pero sin
#indicar cual tiene mas probabilidad y cual menos. Entonces ademas de probar 17 o menos, deberiamos probar 31 o
#mas.
sum(dbinom(0:17, 48, prob = 0.5)) + sum(dbinom(31:48, 48, prob = 0.5))
#Veamos como hacer este test usando funciones de R en lugar de hacerlo a mano
binom.test(17, 48, p = 0.5, "less")
binom.test(17, 48, p = 0.5, "two.sided")
a <- 3
x <- 2
x <- 2
x <- 2
y <- 10
w <- x + y
w
x == y
a <- x == y
print(a)
a
?class
class(x)
class(a)
class(class)
class(c(x, a))
class(a)
GFP <- 509
GFP <- 509
class(GFP)
class(gfp)
gfp <- 2
gfp
GFP
Gfp
?as.character
as.character(GFP)
GFP
class(GFP)
GFP_character <- as.character(GFP)
class(GFP_character)
verde
GFP <- verde
GFP <- "verde"
GFP
?as.numeric
as.numeric(GFP)
b <- as.numeric(GFP)
b
class(b)
NA == NA
NA + 2
?c
c(1, 2, 3)
c(1, 2, 3, x)
c(1, 2, y, 3, x)
r1 <- c(1, 2, y, 3, x, 35, 46, 76, 7, 10)
r1[1]
r1[6]
runif(10, 0, 100)
sample(0:100, 10)
0:100
class(0:100)
(0:100)[53]
source('~/.active-rstudio-document', echo=TRUE)
v_0_100 <- 0:100
v_0_100
class(c("verde", "rojo", "azul"))
sample(c("verde", "rojo", "azul"), 1)
sample(c("verde", "rojo", "azul"), 1)
sample(c("verde", "rojo", "azul"), 2)
sample(c("verde", "rojo", "azul"), 3)
sample(c("verde", "rojo", "azul"), 10, replace = T)
sample(c("verde", "rojo", "azul"), 10)
sample(c("verde", "rojo", "azul"), 10, replace = F)
sample(c("verde", "rojo", "azul"), 10, replace = T)
?runif
runif(10)
runif(10, mix = 10)
runif(10, max = 10)
?sample
r1
r2
r2 <- sample(0:100, 10)
r2
r1 + r2
c(r1, r2, r1, r1, r2)
c(r1, r2)
r1*r2
class(r2)
class(1)
class(0:0)
0:0
class(0:0)
class(0)
1.3
1/3
class(1/3)
r3 <- c(1.2, 3, 5.3)
3/1
class(r1+r2)
as.numeric("10")
as.numeric("10A")
install.packages("BiocManager")
library(BiocManager)
install("DECIPHER")
?install.packages
?update.packages
install("Biostrings")
install.packages("openxlsx")
library(openxlsx)
library(openxlsxs)
#R tiene una funcion que nos devuelve esta probabilidad
dbinom(1, 1, prob = 0.5)
#R tiene una funcion que nos devuelve esta probabilidad
dbinom(x = 1, size = 1, prob = 0.5)
dbinom(x = 1, size = 2, prob = 0.5)
dbinom(x = 2, size = 2, prob = 0.5)
dbinom(x = 1, size = 10, prob = 0.5)
dbinom(x = 1, size = 10, prob = 0.1)
dbinom(x = 1, size = 10, prob = 0.2)
dbinom(x = 1, size = 10, prob = 0.5)
dbinom(x = 1, size = 10, prob = 0.1)
install.packages("openxlsx")
oxford_mindfulness <- read.csv("~/cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_2/oxford_mindfulness.csv")
View(oxford_mindfulness)
oxford_mindfulness <- read.csv("~/cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_2/oxford_mindfulness.csv")
?is.na
is.na(oxford_mindfulness)
which(is.na(oxford_mindfulness), arr.ind = T)
nrow(oxford_mindfulness)
complete.cases(oxford_mindfulness)
a <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
a
which(a)
class(oxford_mindfulness)
class(is.na(oxford_mindfulness))
which(is.na(oxford_mindfulness))
which(is.na(oxford_mindfulness)), arr.ind = T)
which(is.na(oxford_mindfulness), arr.ind = T)
complete.cases(oxford_mindfulness)
oxford_mindfulness[1, ]
oxford_mindfulness[1, ]
oxford_mindfulness[1:5, ]
oxford_mindfulness[c(1, 3, 5), ]
oxford_mindfulness[c(1, 3, 5, 160), ]
which(a)
casos <- complete.cases(oxford_mindfulness)
casos
which(casos)
icasos <- which(casos)
oxford_mindfulness[icasos, ]
casos
!casos
which(!casos)
casos
oxford_mindfulness[casos, ]
oxford_mindfulness_sin_datos_faltantes <- oxford_mindfulness[casos, ]
?duplicated
duplicated(oxford_mindfulness_sin_datos_faltantes)
which(duplicated(oxford_mindfulness_sin_datos_faltantes))
table(duplicated(oxford_mindfulness_sin_datos_faltantes))
table(casos)
head(oxford_mindfulness_sin_datos_faltantes)
class(oxford_mindfulness_sin_datos_faltantes$Depression_T3)
head(oxford_mindfulness_sin_datos_faltantes$Depression_T3)
depre_t3 <- oxford_mindfulness_sin_datos_faltantes$Depression_T3
depre_t1 <- oxford_mindfulness_sin_datos_faltantes$Depression_T1
head(depre_t1)
head(depre_t3 - depre_t1)
depre_t3t1 <- depre_t3 - depre_t1
colnames(oxford_mindfulness_sin_datos_faltantes)
oxford_mindfulness_sin_datos_faltantes$Depression_T3T1
oxford_mindfulness_sin_datos_faltantes$Depression_T3T1 <- depre_t3t1
colnames(oxford_mindfulness_sin_datos_faltantes)
head(oxford_mindfulness_sin_datos_faltantes)
oxford_mindfulness_sin_datos_faltantes[, "a"] <- depre_t3t1
colnames(oxford_mindfulness_sin_datos_faltantes)
?write.table
write.table(oxford_mindfulness_sin_datos_faltantes, file="cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_3/oxford.csv", quote = F, sep = ",", row.names = F)
pacientes <- read.table(file = "sputnik.txt", sep = "\t", header = T)
setwd("~/cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_4")
pacientes <- read.table(file = "sputnik.txt", sep = "\t", header = T)
head(pacientes)
View(pacientes)
#Contemos cuantos pacientes fueron tratados
table(pacientes$tratado)
#Contemos cuantos pacientes se infectaron
table(pacientes$infectado)
#Veamos como es la relacion entre ambas, llamada tabla de contingencia:
table(pacientes$tratado, pacientes$infectado)
chisq.test(pacientes$tratado, pacientes$infectado, correct=FALSE) #Si da < 0.05 rechazamos la hipotesis nula
#Se quiere probar una droga que supuestamente incrementa el peso corporal en mamiferos.
#Para ello se inyecto a 50 ratoncitos mus musculus la droga y se los peso luego de dos semanas.
#El peso promedio de un ratoncito es de 19 g.
#Cargamos los datos
ratoncitos <- read.csv("ratoncitos1.csv")
View(ratoncitos)
#Graficamos histograma, boxplot y calculamos medidas
hist(ratoncitos$weight)
boxplot(ratoncitos$weight)
mean(ratoncitos$weight)
sd(ratoncitos$weight)
#La media es diferente a 19 g, pero sera significativamente diferente?
#Usamos el t-test. Este test nos permite comparar la media de nuestra muestra con la media esperada.
#Para usarlo, tenemos que tener una muestra grande (> 30) o tener una muestra con distribucion normal.
#Tenemos una muestra grande, lo usamos.
#H0: La media muestral de los pesos es 19 g
#H1: La media muestral de los pesos es mayor a 19 g
t.test(ratoncitos$weight, alternative = "greater", mu = 19)
#Cargamos los datos
plantas <- datasets::PlantGrowth
View(plantas)
#Veamos como se distribuyen las plantas dentro de cada grupo
boxplot(weight ~ group, data = plantas)
#Para testear que las dos varianzas sean iguales (homogeneidad de varianzas) podemos usar el test de bartlett.
#H0: Los datos tienen igual varianza
#H1: Los datos no tienen igual varianza
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"]))
bartlett.test(list(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt2"]))
#Para testear que cada variable sea normal
shapiro.test(plantas$weight[plantas$group == "ctrl"])
#Para testear que cada variable sea normal
#H0: Los datos son normales
#H1: Los datos no son normales
shapiro.test(plantas$weight[plantas$group == "ctrl"])
shapiro.test(plantas$weight[plantas$group == "trt1"])
shapiro.test(plantas$weight[plantas$group == "trt2"])
?shapiro.test
hist(rnorm(100, mean = 5, sd = 3))
shapiro.test(rnorm(100, mean = 5, sd = 3))
hist(runif(100, min = 2, max = 4))
shapiro.test(runif(100, min = 2, max = 4))
t.test(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"], var.equal = TRUE)
t.test(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt2"], var.equal = TRUE)
#¿Qué pasa si nuestros datos no cumplen homogeneidad de varianza?
#Veamos los datos de iris
View(iris)
#Comparamos setosa con versicolor en el largo del sépalo
shapiro.test(iris$Sepal.Length[iris$Species == "setosa"])
shapiro.test(iris$Sepal.Length[iris$Species == "versicolor"])
#Veamos si cumplen homogeneidad de varianza
#H0: Los datos tienen igual varianza
#H1: Los datos no tienen igual varianza
bartlett.test(list(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"]))
#Ups! Qué podemos hacer? Usar el test de welch, que testea lo mismo que un t-test pero soporta varianzas distintas
t.test(iris$Sepal.Length[iris$Species == "setosa"], iris$Sepal.Length[iris$Species == "versicolor"], var.equal = F)
#Veamos un ejemplo con muchos valores de categorias.
#Cargamos el archivo de tamanios (Aam) de mejillones en distintos lugares (Location)
mejillones <- read.csv(file = "mejillones.csv")
View(mejillones)
t.test(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt1"], var.equal = TRUE)
t.test(plantas$weight[plantas$group == "ctrl"], plantas$weight[plantas$group == "trt2"], var.equal = TRUE)
t.test(plantas$weight[plantas$group == "trt1"], plantas$weight[plantas$group == "trt2"], var.equal = TRUE)
table(mejillones$Location)
#Usamos anova para comparar la media de los distintos grupos. Necesita normalidad e igualdad de varianzas.
boxplot(Aam ~ Location, mejillones)
shapiro.test(mejillones$Aam[mejillones$Location == "Magadan"])
shapiro.test(mejillones$Aam[mejillones$Location == "Newport"])
shapiro.test(mejillones$Aam[mejillones$Location == "Petersburg"])
shapiro.test(mejillones$Aam[mejillones$Location == "Tillamook"])
shapiro.test(mejillones$Aam[mejillones$Location == "Tvarminne"])
#Descartamos Magadan y Tvarminne porque no son normales
mejillones <- mejillones[mejillones$Location != "Magadan", ]
mejillones <- mejillones[mejillones$Location != "Tvarminne", ]
table(mejillones$Location)
#Veamos las varianzas de esas localidades
var(mejillones$Aam[mejillones$Location == "Newport"])
var(mejillones$Aam[mejillones$Location == "Petersburg"])
var(mejillones$Aam[mejillones$Location == "Tillamook"])
mejillones[mejillones$Location]
mejillones[mejillones$Location, ]
?aov
summary(iris)
#Son practicamente iguales, podemos usar anova
aov(Aam ~ Location, mejillones)
summary(aov(Aam ~ Location, mejillones))
Aam ~ Location
Aamasd ~ Location
summary(aov(mejillones$Aam ~ mejillones$Location))
setwd("~/cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_5")
#Veamos un dataset de medidas de peces. Ancho y alto (?) o largo
fish <- read.csv("fish.csv")
plot(fish$height, fish$width)
#Qué podemos decir de estos peces viendo sus medidas? Tendran algo en comun? Hay grupos de peces?
#.
#.
#.
#Idea! un grupo o cluster es un conjunto de puntos que está más cerca entre si que del resto (o algo por el estilo).
#Pero ojo con la escala. Esta todo en la misma escala? Deberiamos pasar todo a la misma escala para que sean comparables...
plot(fish$height, fish$width, xlim = c(10, 50), ylim = c(10, 50))
fish_escaleado <- as.data.frame(scale(fish, center = T, scale = T))
plot(fish_escaleado$height, fish_escaleado$width, xlim = c(-2, 2), ylim = c(-2, 2))
mamiferos <- read.csv("mamiferos.csv")
View(mamiferos)
nombres <- mamiferos$name #Me guardo los nombres
mamiferos <- mamiferos[, -1] #Me quedo solo con los datos
pairs(mamiferos) #Se ve algun patron?
#Como podriamos graficar en 5 dimensiones?
#PCA al rescate
mamiferos.pca <- prcomp(mamiferos, center = T, scale. = T) #Centramos y escalamos para que todas las variables esten en la misma escala y dimension
mamiferos.pca
plot(mamiferos.pca$sdev/sum(mamiferos.pca$sdev)*100, xlab = "# variable", ylab = "Porcentaje de variabilidad explicada", type="b")
plot(mamiferos.pca$x[, 1:2], main = "Mamiferos")
text(mamiferos.pca$x[, 1:2], nombres, cex=0.65, pos=3,col="red")
#Usamos K-Means para encontrar los centros de estos grupos. Cada punto es asignado al centro más cercano
library(cluster)
#Volvamos al dataset de peces
plot(fish_escaleado$height, fish_escaleado$width, xlim = c(-2, 2), ylim = c(-2, 2))
#Usamos K-Means para encontrar los centros de estos grupos. Cada punto es asignado al centro más cercano
library(cluster)
#Antes de correrlo, una pregunta conceptual: dado un conjunto de datos y un k, kmeans siempre me da lo mismo? es decir, es determinista?
#o hay elementos aleatorios en el metodo? cual?
#.
#.
#.
#.
#Seteamos el generador de numeros aleatorios para poder reproducir los mismos resultados en un futuro
set.seed(1234567)
clusters <- kmeans(fish_escaleado, centers = K)
K <- 3
clusters <- kmeans(fish_escaleado, centers = K)
#Veamos que devuelve kmeans.
clusters
#Grafiquemos a que grupo quedo asignado cada punto
plot(fish_escaleado, col=c("red", "blue", "green")[clusters$cluster])
#Graficamos los centros que encontró
points(clusters$centers, col=c("red", "blue", "green"), pch = 17)
#¿El K fue el correcto u otro hubiera funcionado mejor? ¿Funciono bien? ¿Como podríamos medirlo?
#.
#.
#.
#.
#Podemos usar alguna propiedad de los grupos que sea de interés y encontrar el k que la maximice (o minimice).
#En este caso, queremos encontrar grupos compactos, donde todos los elementos de un grupo estén lo más cerca posible de su centro.
#Podemos sumar las distancias de cada punto a su respectivo centro (SSE o suma de los cuadrados de los residuos)
#y usar eso como medida.
clusters$withinss
sum(clusters$withinss) #Idealmente, cuanto deberia ser la distancia? Tiene sentido eso?
#Qué hubiera pasado si elegíamos un K diferente?
plot(fish_escaleado$height, fish_escaleado$width)
K <- 2
clusters <- kmeans(fish_escaleado, centers = K)
#Veamos que devuelve kmeans
clusters
#Grafiquemos a que grupo quedo asignado cada punto
plot(fish_escaleado, col=clusters$cluster)
#Graficamos los centros que encontró
points(clusters$centers, col=1:nrow(clusters$centers), pch = 17)
sum(clusters$withinss)
#probemos varios k y grafiquemos
set.seed(1234567)
sse <- c()
clusters <- kmeans(fish_escaleado, centers = 2)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(fish_escaleado, centers = 3)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(fish_escaleado, centers = 4)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(fish_escaleado, centers = 5)
sse      <- c(sse, sum(clusters$withinss))
clusters <- kmeans(fish_escaleado, centers = 6)
sse      <- c(sse, sum(clusters$withinss))
plot(2:6, sse, type = "b", xlab = "k") #Criterio del codo
#Otra forma de ver esto es usando un grafico de siluetas
#-------------------------Este codigo no importa!
require(jpeg)
img<-readJPEG("sil.jpg")
plot(1:10,ty="n", xlim = c(0, 10), ylim = c(0, 10))
rasterImage(img,0,0,10,10)
#-------------------------
#Grafico un silhouette
set.seed(1234567)
clusters <- kmeans(fish_escaleado, centers = 3)
plot(silhouette(clusters$cluster, dist(fish_escaleado)))
clusters <- kmeans(fish_escaleado, centers = 2)
plot(silhouette(clusters$cluster, dist(fish_escaleado)))
#-------------------------
#Grafico un silhouette
set.seed(1234567)
clusters <- kmeans(fish_escaleado, centers = 3)
plot(silhouette(clusters$cluster, dist(fish_escaleado)))
clusters <- kmeans(fish_escaleado, centers = 2)
plot(silhouette(clusters$cluster, dist(fish_escaleado)))
sleep
View(sleep)
boxplot(extra ~ grupo, data = sleep)
boxplot(extra ~ group, data = sleep)
bartlett.test(list(sleep$extra[sleep$group == 1],
sleep$extra[sleep$group == 2]))
shapiro.test(sleep$extra[sleep$group == 1])
shapiro.test(sleep$extra[sleep$group == 2])
t.test(sleep$extra[sleep$group == 1],
sleep$extra[sleep$group == 1], var.equal = TRUE)
t.test(sleep$extra[sleep$group == 1],
sleep$extra[sleep$group == 2], var.equal = TRUE)
iris
solo_setosa <- iris[iris$Species == "setosa", ]
solo_setosa
solo_setosa$Petal.Length
mean(solo_setosa$Petal.Length)
sd(solo_setosa$Petal.Length)
?t.test
t.test(solo_setosa$Petal.Length, alternative = "two.sided", mu = 1.5)
setwd("~/cursos/analisis_de_datos_con_r_diciembre_2021/clases/clase_4")
pacientes <- read.table(file = "pacientes.txt", sep = "\t", header = T)
head(pacientes)
View(pacientes)
table(pacientes$tratado, pacientes$infectado)
table(pacientes$tratado, pacientes$curado)
chisq.test(pacientes$tratado, pacientes$curado, correct=FALSE) #Si da < 0.05 rechazamos la hipotesis nula
