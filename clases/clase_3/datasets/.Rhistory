Co2[1]
Co2[2]
Co2[3]
Co2[1]
Co2[1] <- "Medio"
Co2
Co2[1] <- "Muy Bajo"
Co2 <- c("Bajo", "Medio", "Alto")
class(Co2)
Co2[1] <- "Muy Bajo"
Co2
as.factor(Co2)
Co2 <- as.factor(Co2)
Co2
runif(n = 10, min = -100, max = 100)
r1 <- runif(n = 10, min = -100, max = 100)
?sort
sort(r1, decreasing = F)
sort(r1)
source('~/.active-rstudio-document', echo=TRUE)
sample(x = dado, size = 1)
#Fabriquemos un dado y tirémoslo
dado <- c(1, 6)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Fabriquemos un dado y tirémoslo varias veces
dado <- c(1, 6)
#Fabriquemos un dado y tirémoslo varias veces
dado <- 1:6
dado
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Las computadoras son máquinas deterministas, ante la misma entrada siempre devuelven la misma salida
#Si queremos simular el azar, necesitamos un generador de números pseudo-aleatorios.
#Los generadores de números pseudo-aleatorios necesitan un lugar desde donde comenzar a producir
#los números y eso se lo decimos a R usando set.seed
set.seed(1234)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Las computadoras son máquinas deterministas, ante la misma entrada siempre devuelven la misma salida
#Si queremos simular el azar, necesitamos un generador de números pseudo-aleatorios.
#Los generadores de números pseudo-aleatorios necesitan un lugar desde donde comenzar a producir
#los números y eso se lo decimos a R usando set.seed
set.seed(123457)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Ahora tiremos dos dados
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
#Fabriquemos una función que tire los dos dados
dosDados <- function(){
sample(1:6, 2, replace=T)
}
dosDados
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
#Fabriquemos una función que tire los dos dados. Fijensé que una función no necesariamente requiere
#un parámetro
dosDados <- function(){
#Fabrico el dado
dado <- 1:6
#Lo tiro dos veces
tirada <- sample(dado, 2, replace=T)
#Devuelvo la tirada
return(tirada)
}
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
dosDados()
diez_tiradas <- replicate(10, dosDados)
diez_tiradas
?replicate
diez_tiradas <- replicate(10, dosDados())
diez_tiradas
diez_tiradas
diez_tiradas <- t(diez_tiradas)
head(diez_tiradas)
diez_tiradas
suma_de_las_caras <- rowSums(diez_tiradas)
head(suma_de_las_caras)
suma_de_las_caras
#Es igual de probable sacar cualquier número? Contemos cuantas veces aparece cada número.
table(suma_de_las_caras)
#Las computadoras son máquinas deterministas, ante la misma entrada siempre devuelven la misma salida
#Si queremos simular el azar, necesitamos un generador de números pseudo-aleatorios.
#Los generadores de números pseudo-aleatorios necesitan un lugar desde donde comenzar a producir
#los números y eso se lo decimos a R usando set.seed
set.seed(123457)
#Fabriquemos un dado y tirémoslo varias veces
dado <- 1:6
dado
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Ahora tiremos dos dados
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
#Tiramos diez veces los dos dados. Podríamos usar un for pero r nos ayuda usando replicate
?replicate
#Fabriquemos una función que tire los dos dados. Fijensé que una función no necesariamente requiere
#un parámetro
dosDados <- function(){
#Fabrico el dado
dado <- 1:6
#Lo tiro dos veces
tirada <- sample(dado, 2, replace=T)
#Devuelvo la tirada
return(tirada)
}
#Tiremos los dados diez veces
diez_tiradas <- replicate(10, dosDados())
#Veamos qué devuelve R
diez_tiradas
#Transponemos para que cada columna sea un dado y cada fila una tirada
?t
diez_tiradas <- t(diez_tiradas)
diez_tiradas
#Sumemos los dos dados de cada tirada. Podríamos usar un for pero por rowSums viene a nuestra ayuda
#para sumar los elementos de cada fila entre si, fila por fila.
?rowSums
suma_de_las_caras <- rowSums(diez_tiradas)
suma_de_las_caras
#Es igual de probable sacar cualquier número? Contemos cuantas veces aparece cada número.
table(suma_de_las_caras)
#¿Si corremos esto de nuevo obtenemos el mismo resultado?
diez_tiradas <- replicate(10, dosDados())
diez_tiradas <- t(diez_tiradas)
suma_de_las_caras2 <- rowSums(diez_tiradas)
table(suma_de_las_caras)
table(suma_de_las_caras2)
#¿Cómo podemos intentar estimar la probabilidad real de que salga cada número?
#Si tiramos muchas veces y contamos cuantas veces
#da cada resultado nos podemos acercar bastante al valor real
diezmil_tiradas <- replicate(10000, dosDados())
diezmil_tiradas <- t(diezmil_tiradas)
head(diezmil_tiradas)
suma_de_las_caras <- rowSums(diezmil_tiradas)
#Calculemos la probabilidad estimada de cada número. Esto lo podemos pensar como el porcentaje de
#veces que salió cada uno
probabilidad_estimada <- table(suma_de_las_caras)/10000
probabilidad_estimada
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Función (estimada) de probabilidad puntual de 'suma de las caras'")
#La posta se puede calcular (¿cómo?) y es la siguiente:
probabilidad_real <- c(1/36, 2/36, 3/36, 4/36, 5/36, 6/36, 5/36, 4/36, 3/36, 2/36, 1/36)
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Función (estimada) de probabilidad puntual de 'suma de las caras'")
plot(probabilidad_real, add = TRUE)
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Función (estimada) de probabilidad puntual de 'suma de las caras'")
points(probabilidad_real, col = "red")
points(2:12, probabilidad_real, col = "red")
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Función (estimada) de probabilidad puntual de 'suma de las caras'")
points(2:12, probabilidad_real, col = "red")
#################################################################
#              Curso de análisis de datos con R
#Asociación Argentina de Bioinformática y Biologíca Computacional
#                         Octubre 2020
#                      Test de hipótesis
#################################################################
#Usemos R como un simulador. Simulemos tirar un dado miles de veces. La función sample va a venir en
#nuestra ayuda para esto.
?sample
#Las computadoras son máquinas deterministas, ante la misma entrada siempre devuelven la misma salida
#Si queremos simular el azar, necesitamos un generador de números pseudo-aleatorios.
#Los generadores de números pseudo-aleatorios necesitan un lugar desde donde comenzar a producir
#los números y eso se lo decimos a R usando set.seed
set.seed(123457)
#Fabriquemos un dado y tirémoslo varias veces
dado <- 1:6
dado
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
sample(x = dado, size = 1)
#Cada vez que lo tiramos da algo distinto!
#Ahora tiremos dos dados
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
sample(dado, 2, replace=T)
#Tiramos diez veces los dos dados. Podríamos usar un for pero r nos ayuda usando replicate
?replicate
#Fabriquemos una función que tire los dos dados. Fijensé que una función no necesariamente requiere
#un parámetro
dosDados <- function(){
#Fabrico el dado
dado <- 1:6
#Lo tiro dos veces
tirada <- sample(dado, 2, replace=T)
#Devuelvo la tirada
return(tirada)
}
#Tiremos los dados diez veces
diez_tiradas <- replicate(10, dosDados())
#Veamos qué devuelve R
diez_tiradas
#Transponemos para que cada columna sea un dado y cada fila una tirada
?t
diez_tiradas <- t(diez_tiradas)
diez_tiradas
#Sumemos los dos dados de cada tirada. Podríamos usar un for pero por rowSums viene a nuestra ayuda
#para sumar los elementos de cada fila entre si, fila por fila.
?rowSums
suma_de_las_caras <- rowSums(diez_tiradas)
suma_de_las_caras
#¿Es igual de probable sacar cualquier número? Contemos cuantas veces aparece cada número.
table(suma_de_las_caras)
#¿Si corremos esto de nuevo obtenemos el mismo resultado?
diez_tiradas <- replicate(10, dosDados())
diez_tiradas <- t(diez_tiradas)
suma_de_las_caras2 <- rowSums(diez_tiradas)
#Comparemos con la tirada anterior
table(suma_de_las_caras)
table(suma_de_las_caras2)
#¿Cómo podemos intentar estimar la probabilidad real de que salga cada número?
#Si tiramos muchas veces y contamos cuantas veces
#da cada resultado nos podemos acercar bastante al valor real
diezmil_tiradas <- replicate(10000, dosDados())
diezmil_tiradas <- t(diezmil_tiradas)
head(diezmil_tiradas)
suma_de_las_caras <- rowSums(diezmil_tiradas)
#Calculemos la probabilidad estimada de cada número. Esto lo podemos pensar como el porcentaje de
#veces que salió cada uno
probabilidad_estimada <- table(suma_de_las_caras)/10000
#La posta se puede calcular (¿cómo?) y es la siguiente:
probabilidad_real <- c(1/36, 2/36, 3/36, 4/36, 5/36, 6/36, 5/36, 4/36, 3/36, 2/36, 1/36)
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Función (estimada) de probabilidad puntual de 'suma de las caras'")
points(2:12, probabilidad_real, col = "red")
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Distribución (estimada) de probabilidad puntual de 'suma de las caras'")
#Grafiquemos la probabilidad estimada y la probabilidad real
plot(probabilidad_estimada, xlab="x", ylab = "P", main="Distribución (estimada) de probabilidad de 'suma de las caras'")
air <- datasets::airquality
a <- c("hola", "hola", "hola", "chau", "chau", "buen día")
a
table(a)
air
head(air)
calor <- air[which(air$Temp >= 90), ]
calor
head(calor)
calor2 <- air[air$Temp >= 90, ]
head(calor2)
air$Temp >= 90
length(air$Temp >= 90)
nrow(air)
which(air$Temp >= 90)
head(calor)
table(calor$Month)
head(air$Temp)
head((air$Temp - 32))
(air$Temp - 32)/1.8
head((air$Temp - 32)/1.8)
celsius <- (air$Temp - 32)/1.8
air2 <- cbind(air, celsius)
head(air2)
air$Temp <- celsius
head(air)
m <- matrix(0, nrow=5, ncol=10)
m
for(auxiliar in a){
print(auxiliar)
}
m
for(columna in 1:10){
for(fila in 1:5){
print(paste(columna, fila))
}
}
for(columna in 1:10){
for(fila in 1:5){
print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
m
for(i in 1:10){
for(fila in 1:5){
print(paste(i, fila))
m[fila, i] <- fila + i
}
}
m
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
}
m[fila, columna] <- fila + columna
}
m
m <- matrix(0, nrow=5, ncol=10)
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
}
m[fila, columna] <- fila + columna
}
m
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
m
m <- matrix(0, nrow=5, ncol=10)
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
m
m <- matrix(0, nrow=5, ncol=10)
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
m
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
m <- matrix(0, nrow=5, ncol=10)
m
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
m
m <- matrix(0, nrow=5, ncol=10)
m
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
m <- matrix(0, nrow=5, ncol=10)
for(columna in 1:10){
for(fila in 1:5){
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
m
for(columna in 1:10){
for(fila in 1:5){
m
#print(paste(columna, fila))
m[fila, columna] <- fila + columna
}
}
sample(1:4, 10)
sample(1:4, 4)
sample(1:4, 10)
sample(1:4)
rm(list=ls())
gc()
?translate
air <- datasets::airquality
which.min(air$Solar.R)
air[which.min(air$Solar.R), }
air[which.min(air$Solar.R), ]
#Primero le decimos a R en qué directorio queremos que trabaje
getwd()
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
setwd("~/")
setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020")
#setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "datasets/cases-covid-19.csv", stringsAsFactors = F, header = T)
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "datasets/cases-covid-19.csv", stringsAsFactors = F, header = T)
casos_covid
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3/datasets")
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3/datasets")
#setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "cases-covid-19.csv", stringsAsFactors = F, header = T)
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3/datasets")
setwd("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3/datasets")
#setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "dataset/cases-covid-19.csv", stringsAsFactors = F, header = T)
#setwd("trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3")
#Leemos un archivo csv. Usamos header = T para que tome la primera fila del archivo como los nombres de los atributos
#y stringsAsFactors = F para que no modifique los atributos tipo character o string
casos_covid <- read.csv(file = "cases-covid-19.csv", stringsAsFactors = F, header = T)
cases.covid.19 <- read.csv("~/trabajo/cursos/analisis_de_datos_con_r_octubre_2020/clases/clase_3/datasets/cases-covid-19.csv", stringsAsFactors=FALSE)
View(cases.covid.19)
casos_covid <- cases.covid.19
#Veamos cuantos datos tiene nuestro dataset, representados por las filas de la tabla
nrow(casos_covid)
#Veamos cuantos atributos tiene nuestro dataset, representados por las columnas de la tabla
ncol(casos_covid)
#Veamos qué tipo de atributos son
str(casos_covid)
casos_covid
#Imprimamos las primeras 10 filas del dataset
head(casos_covid, n = 10)
#Imprimamos las últimas 10 filas del dataset
tail(casos_covid, n = 10)
class(casos_covid)
#Veamos qué tipo de atributos son
str(casos_covid)
#Imprimamos los nombres de las variables
colnames(casos_covid)
#Podemos abrirlo tipo excel
View(casos_covid)
#----------------------------------------------------------------------
#Leamos un archivo tabulado usando otra función de R, read.delim. Esta función permite leer
#un archivo separado por cualquier delimitador, coma, tab, espacios, etc.
casos_covid_secuenciados <- read.delim("datasets/casos_covid_secuenciados.txt", sep = "\t",
header = T, stringsAsFactors = F)
#----------------------------------------------------------------------
#Leamos un archivo tabulado usando otra función de R, read.delim. Esta función permite leer
#un archivo separado por cualquier delimitador, coma, tab, espacios, etc.
casos_covid_secuenciados <- read.delim("casos_covid_secuenciados.txt", sep = "\t",
header = T, stringsAsFactors = F)
#----------------------------------------------------------------------
#Leamos un archivo tabulado usando otra función de R, read.delim. Esta función permite leer
#un archivo separado por cualquier delimitador, coma, tab, espacios, etc.
casos_covid_secuenciados <- read.delim("casos_covid_secuenciados.txt", sep = "\t",
header = T, stringsAsFactors = F)
#Entendamos el dataset
#Veamos cuantos datos tiene nuestro dataset, representados por las filas de la tabla
nrow(casos_covid_secuenciados)
#Veamos cuantos atributos tiene nuestro dataset, representados por las columnas de la tabla
ncol(casos_covid_secuenciados)
#Imprimamos las primeras 10 filas del dataset
head(casos_covid_secuenciados, n = 10)
#Imprimamos las últimas 10 filas del dataset
tail(casos_covid_secuenciados, n = 10)
#Imprimamos los nombres de las variables
colnames(casos_covid_secuenciados)
#Podemos abrirlo tipo excel
View(casos_covid_secuenciados)
#Veamos qué tipo de atributos son
str(casos_covid_secuenciados)
#Sequence.Length, a, c, g, t son enteros (int) y an, cn, gn y tn son valores "reales" (num), mientras que el resto son characters
#Veamos un resumen de Sequence.Length
class(casos_covid_secuenciados$Virus.Strain.Name)
casos_covid_secuenciados$Sequence.Length
summary(casos_covid_secuenciados$Sequence.Length)
summary(casos_covid_secuenciados[, 1:2])
summary(casos_covid_secuenciados[, c("a", "c", "g", "t")])
#Calculemos las distintas medidas de centralidad
media <- mean(casos_covid_secuenciados$Sequence.Length)
media
summary(casos_covid_secuenciados$Sequence.Length)
media
mediana <- median(casos_covid_secuenciados$Sequence.Length)
mediana
#Dejamos la moda para después
#Calculemos las distintas medidas de dispersión
rango <- max(casos_covid_secuenciados$Sequence.Length)-min(casos_covid_secuenciados$Sequence.Length)
rango
hist(casos_covid_secuenciados$Sequence.Length)
desvio <- sd(casos_covid_secuenciados$Sequence.Length)
desvio
varianza <- var(casos_covid_secuenciados$Sequence.Length)
varianza
desvio*desvio
iqr <- IQR(casos_covid_secuenciados$Sequence.Length)
iqr
mediana
#Grafiquemos un histograma con la distribución
hist(casos_covid_secuenciados$Sequence.Length, xlab="Longitud de la secuencia", main="Histograma de casos", breaks=20)
